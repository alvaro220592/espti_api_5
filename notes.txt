definir banco de dados ŕa utf8mb4_unicode_ci

limitar o nº de caracteres do email da tabela users

criar model Models\\Product com -m

definiir o $fillable

editar a migration

dar migrate

criar seeder de usuario: php artisan make:seeder UsersTableSeeder

criar seeder de produtos: php artisan make:seeder ProductsTableSeeder

O usuario var ser criado na seeder. A senha nao foi configurada com hash e sim : "'password' => bcrypt('12345678'),"

Produtos foram cadastrados por factory: php artisan make:factory Productfactory --model=Product
    dentro da factory:
        $factory->define(App\Models\Product::class, function (Faker $faker) {
            return [
                'name' => $faker->unique()->word(),
                'description' => $faker->sentence()
            ];
        });

Na seeder de produtos, foi chamada a factory:
    public function run()
    {
        factory(App\Models\Product::class, 20)->create();
    }

na DatabaseSeeder, vão ser chamados os seeders de usuário e produtos:
    $this->call(UsersTableSeeder::class);
    $this->call(ProductsTableSeeder::class);

Pra rodar:
    php artisan db:seed


aula 5: criação da api
    As rotas serão versionadas e do tipo resource
    Foi criado o controller de produtos dentro de uma pasta "Api" com as flags --api e --model=Models\\Product

    no controller foi instanciada a model Product no construtor pra nao precisar instanciar em todos os métodos:

    private $product;
    
    public function __construct(Product $product)
    {   
        $this->product = $product;
    }

    daí pra frente, sempre se refere a ela como "$this->product"

aula 7 - cadastrar e validar:
    
    model Product:
    public function rules($id = ''){
        return [
            'name' => "required|min:3|max:100|unique:products,name,{$id},id",
            'description' => 'required|min:10|max:1000'
        ];
    }

    Controller:

    public function store(Request $request)
    {
        $validate = validator($request->all(), $this->product->rules());

        if($validate->fails()){
            return response()->json($validate->messages());
        }

        if (! $this->product->create($request->all()))
            return response()->json(['Erro' => 'Erro ao cadastrar'], 500);
        
        return response()->json([
            'Mensagem' => 'Cadastro realizado com sucesso',
            'Dados' => $request->all()
        ]);
    }

aula 8 - exibir produto
    método show:
    public function show($id)
    {
        if(! $this->product = Product::find($id))
            return response()->json(['Mensagem' => 'Produto não encontrado']);
        return response()->json(['Produtos' => $this->product]);
    }

aula 9 - alterar e validar
    Controller:
    public function update(Request $request, $id)
    {
        $product = $this->product->find($id);

        // verificando se existe o produto com o id informado
        if(! $product)
            return response()->json(['Mensagem' => 'Produto não encontrado']);

        $validacao = validator($request->all(), $product->rules($id));

        if($validacao->fails())
            return response()->json(['Erro' => $validacao->messages()]);

        if(! $product->update($request->all()))
            return response()->json(['Erro' => 'Erro ao alterar'], 500);
        return response()->json([
            'Mensagem' => 'Dados alterados com sucesso',
            'Produto' => $product
        ]);
    }

aula 10 - deletando:
    public function destroy($id)
    {
        if (! $produto = $this->product->find($id))
            return response()->json(['Mensagem' => 'Produto não encontrado']);

        if (! $produto->delete())
            return response()->json(['Erro' => 'Erro ao excluir']);
        return response()->json([
            'Mensagem' => 'Produto excluído com sucesso',
            'Produto' => $produto
        ]);
    }

aula 11- versionamento de api - já está versionada desde o começo

aula 12 - limite de requisições
    em app/http/kernel tem uma parte chamada 'api' que tem o throttle, onde consta o  numero de requisições e o numero em minutos. Tantas requisições por minuto

aula 13 - paginar e pesquisar.
    A paginação já foi feita. Falta o search
    foi criada uma rota e um método pra search

    model:
        public function ruleSearch(){
            return [
                'busca' => 'required'
            ];
        }

        public function search($data){

            return $this->where('name', 'like', "%{$data['busca']}%")
                        ->orWhere('description', 'like', "%{$data['busca']}%")
                        ->paginate(10);
        }

    Controller:
        public function search(Request $request){
        $data = $request->all();

        $validacao = validator($data, $this->product->ruleSearch());
        if ($validacao->fails())
            return response()->json(['Erro' => $validacao->messages()]);
        
        return response()->json(['Resultado' => $this->product->search($data)]);
    }


AULA: 14 - CONFIGURAR O JWT

    Link: https://github.com/tymondesigns/jwt-auth

    clica no wiki(https://github.com/tymondesigns/jwt-auth/wiki). Nele tem a documentação de instalação

    Em Installation
        copia o "tymon/jwt-auth": "0.5.*" pra colar no "require" do composer.json
        roda no terminal 'composer update'
        adiciona 'Tymon\JWTAuth\Providers\JWTAuthServiceProvider' no array 'providers' em config/app.php.
        no mesmo arquivo, no array 'aliases', cola 'JWTAuth' => Tymon\JWTAuth\Facades\JWTAuth::class,
        No mesmo array, cola 'JWTFactory' => Tymon\JWTAuth\Facades\JWTFactory::class,
        publica o vendor: $ php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\JWTAuthServiceProvider". Ele cria um arquivo chamado jwt.php em config/
        No arquivo jwt.php tem um 'secret' que abriga uma chave de segurança pra gerar tokens
        'ttl' é o tempo em minutos, de validade do token
        'refresh_ttl' é o tempo em minutos depois que o token é atualizado
        'algo' é o tipo de hash que ele usa
        'user' abriga a model que ele usa
        'identifier' é o identificador da tabela, no caso, o id
        para criar um novo token, vai no terminal e põe 'php artisan jwt:generate'
        O padrão no laravel é pegar esse token criado e colocar lá no .env. Aí no jwt.php fica assim: "'secret' => env('JWT_SECRET', ''),"
        Nesse projeto deu o seguinte erro ao gerar o token:
            php artisan jwt:generate ReflectionException : Method Tymon\JWTAuth\Commands\JWTGenerateCommand::handle() does not exist
        
        em '/vendor/tymon/jwt-auth/src/Commands/JWTGenerateCommand.php' alterei o nome da função 'fire' para 'handle' e funcionou

        configurando o middleware do jwt:
            em app/http/kernel.php, protected $routeMiddleware, adiciona:
                'jwt.auth' => \Tymon\JWTAuth\Middleware\GetUserFromToken::class,
        
        altera as rotas envolvendo elas num novo grupo de autenticação:
            Route::group(['prefix' => 'v1'], function(){
                Route::group(['middleware' => 'jwt.auth'], function(){
                    Route::resource('products', 'Api\ProductController');
                    Route::post('products/search/', 'Api\ProductController@search');
                });
            });

        Ao rodar uma requisição, retorna o seguinte:
        {
            "error": "token_not_provided"
        }

aula 15: creating tokens
    la no wiki do github do jwt, clica em 'creating tokens': https://github.com/tymondesigns/jwt-auth/wiki/Creating-Tokens
    Copie a função 'authenticate'
    Depois do 'composer update' q foi dado na aula anterior, foram criados alguns controllers de autenticação. No vídeo, o cara renomeia o LoginController pra 'AuthApiController' e apaga o 'use Illuminate\Foundation\Auth\AuthenticatesUsers;'
    A classe foi renomeada com o mesmo nome do arquivo.
    Todo o conteúdo da classe foi apagado e ali foi colada a função authenticate.
    Tive q importar algumas coisas do jwt lá. Apaguei a ultima letra de onde tava dando erro e ctrl+espaço pra ver a sugestão.
    O controller ficou assim:
        namespace App\Http\Controllers\Auth;

        use App\Http\Controllers\Controller;
        use Illuminate\Http\Request;
        use Tymon\JWTAuth\Exceptions\JWTException;
        use Tymon\JWTAuth\Facades\JWTAuth;

        class AuthApiController extends Controller
        {
            public function authenticate(Request $request)
            {
                // grab credentials from the request
                $credentials = $request->only('email', 'password');

                try {
                    // attempt to verify the credentials and create a token for the user
                    if (! $token = JWTAuth::attempt($credentials)) {
                        return response()->json(['error' => 'invalid_credentials'], 401);
                    }
                } catch (JWTException $e) {
                    // something went wrong whilst attempting to encode the token
                    return response()->json(['error' => 'could_not_create_token'], 500);
                }

                // all good so return the token
                return response()->json(compact('token'));
            }
        }

    Foi criada uma rota de login fora do grupo de rotas restritas, mas ainda dentro do 'v1'

    O "Route::" foi substituido por "$this->".
    Criei uma request pro login
    depois de enviar a requisição, retorna um token pra colar no header das requisições
    O header fica assim:
    | Authorization | Bearer <coleOTokenAqui> |

aula 16 - refresh token
    é uma renovação do token. de início ele vem configurado pra durar 60 minutos (config/jwt.php). Quando dá refresh, passa a durar 20160 minutos
    Pra isso foi criada uma funçao (refreshToken) lá no controller de autenticação.
    Quando der 'token expired', manda chamar o método criado.
    Foi criada uma rota chamada auth-refresh
    Se for feita uma requisição com o token antigo no header, vai reclamar 'token expired'. É aí que entra a rota criada pra chamar o controller de refresh
    Pra renovar o token, tem q passar ele na url. Se for no header, nao aceita:
    "localhost:8000/api/v1/auth-refresh?token=eyJ0eXAi..."
    O cara da especializati fez a rota como post. Eu fiz GET, já q é pra pegar algo pela url.
    Estava fazendo pelo Insomnia mas começou a dar problema e mudei pro postman

aula 17 - consumindo webservice de aplicação externa
    foi criado um projeto em /home/alvaro/Documentos/cursos/js/ajax-fetch/consumindo_espiti_api_5/ pra consumir esta api

    Tem que configurar o cors pra não dar erro:

        https://github.com/barryvdh/laravel-cors

        roda no terminal:
            composer remove barryvdh/laravel-cors fruitcake/laravel-cors
            composer require fruitcake/laravel-cors
        
        Adiciona o middleware em app/Http/kernel.php:
            \Fruitcake\Cors\HandleCors::class,

        Publicar o vendor:
            php artisan vendor:publish --tag="cors"

        em config/cors.php:
            'paths' => ['api/*'],

